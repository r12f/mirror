#include "stdafx.h"
#include "modules/builtin/component_hotkey.h"
#include "modules/framework.h"
#include "modules/window/module_window.h"
#include "modules/window/highlight/highlight_service.h"

MirModuleWindow::MirModuleWindow()
{

}

MirModuleWindow::~MirModuleWindow()
{

}

STDMETHODIMP
MirModuleWindow::Create()
{
    CComPtr<IUnknown> spUnk;
    HighlightService::CreateObject(__uuidof(IUnknown), (void **)&spUnk);
    GetFramework()->RegisterComponent(CComBSTR(COMPONENT_WINDOW_HIGHLIGHT_SERVICE), spUnk);

    return S_OK;
}

STDMETHODIMP
MirModuleWindow::Destroy()
{
    GetFramework()->UnregisterComponent(CComBSTR(COMPONENT_WINDOW_HIGHLIGHT_SERVICE));

    return S_OK;
}

STDMETHODIMP
MirModuleWindow::Init()
{
    // 注册设置提供项
    CComPtr<IConfig> pConfig = GetComponentInterface<IConfig>(COMPONENT_CONFIG);
    ASSERT_RETURN(NULL != pConfig, E_FAIL);
    pConfig->AddProvider(this);

    CString strDesktopWindow;
    strDesktopWindow.Format(_T("%lu"), (DWORD)(DWORD_PTR)::GetDesktopWindow());
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_LIST_ROOT_HWND)] = strDesktopWindow;
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_WATCH_HWND)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_MOUSE_OFFSET_X)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_MOUSE_OFFSET_Y)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_LIST_AUTO_REFRESH)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_LIST_AUTO_REFRESH_INTERVAL)] = L"1000";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_LIST_AUTO_EXPAND)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_PROPERTIES_AUTO_REFRESH)] = L"0";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_PROPERTIES_AUTO_REFRESH_INTERVAL)] = L"1000";
    m_vWindowConfigs[CComBSTR(CONFIG_KEY_WINDOW_PROPERTIES_ENABLE_TRACK_MODE)] = L"0";

    // 注册热键
    CComPtr<IHotkeyManager> pHotkeyMgr = GetComponentInterface<IHotkeyManager>(COMPONENT_HOTKEY);
    ASSERT_RETURN(NULL != pHotkeyMgr, E_FAIL);

    // Section: 基本:切换标签
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_LIST), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_INFO), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_BASIC_INFO), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_CLASS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_PROP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_OP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_INPUT), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_INPUT_KEYMOUSE), 0, 0, FALSE, NULL);
    //RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_INPUT_BATCH), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_DWM), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_DWM_OP), 0, 0, FALSE, NULL);
    //pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_BASIC_SWITCH_TO_TAB), CComBSTR(HOTKEY_NAME_BASIC_SWITCH_TO_TAB_WINDOW_DWM_TIMING), 0, 0, FALSE, NULL);

    // Section: 窗口
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW), CComBSTR(HOTKEY_NAME_WINDOW_SELECT_WINDOW), MOD_CONTROL | MOD_ALT, 'E', TRUE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW), CComBSTR(HOTKEY_NAME_WINDOW_TRACK_WATCH_WINDOW), 0, 0, FALSE, NULL);

    // Section: 窗口:基本信息
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_PARENT), MOD_CONTROL | MOD_ALT, 'R', TRUE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_OWNER), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_CHILD), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_HWNDPREV), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_HWNDNEXT), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_FOCUS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_ACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_CAPTURE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_FOREGROUND), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_GLOBAL_FOCUS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_GLOBAL_ACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_GOTO_GLOBAL_CAPTURE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_FOCUS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_ACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_CAPTURE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_FOREGROUND), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_GLOBAL_FOCUS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_GLOBAL_ACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_TRACK_GLOBAL_CAPTURE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INFO), CComBSTR(HOTKEY_NAME_WINDOW_INFO_SET_PARENT), 0, 0, FALSE, NULL);

    // Section: 窗口:窗口Prop
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_PROP), CComBSTR(HOTKEY_NAME_WINDOW_PROP_CREATE_PROP), 0, 0, FALSE, NULL);

    // Section: 窗口:窗口操作
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SEND_MESSAGE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SET_FOCUS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SET_ACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SET_FOREGROUND), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ENABLE_WINDOW_TRUE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ENABLE_WINDOW_FALSE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ZORDER_HWND_TOPMOST), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ZORDER_HWND_TOP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ZORDER_HWND_NOTOPMOST), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_ZORDER_HWND_BOTTOM), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOW), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWNORMAL), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWDEFAULT), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_MAXIMIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWMAXIMIZED), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_MINIMIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWMINIMIZED), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWMINNOACTIVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_FORCEMINIMIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_RESTORE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWNA), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_SHOWNOACTIVATE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SHOW_WINDOW_SW_HIDE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_CLOSE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_CONTEXTHELP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_DEFAULT), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_HOTKEY), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_HSCROLL), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_KEYMENU), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_MAXIMIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_MINIMIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_MONITORPOWER), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_MOUSEMENU), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_MOVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_NEXTWINDOW), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_PREVWINDOW), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_RESTORE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_SCREENSAVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_SIZE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_TASKLIST), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_SYSCOMMAND_SC_VSCROLL), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_OP), CComBSTR(HOTKEY_NAME_WINDOW_OP_PARSE_WAIT_CHAIN), 0, 0, FALSE, NULL);

    // Section: 窗口:模拟输入:鼠标
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_DOWN), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_UP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_DBLCLK), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_NCDOWN), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_NCUP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_WM_NCDBLCLK), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_CLICK), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_DBLCLK), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_REAL_CLICK), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_MOUSE), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_MOUSE_REAL_DBLCLK), 0, 0, FALSE, NULL);

    // Section: 窗口:模拟输入:键盘
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_KEY), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_KEY_WM_DOWN), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_KEY), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_KEY_WM_UP), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_KEY), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_KEY_WM_CHAR), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_KEY), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_KEY_STROKE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_INPUT_KEY), CComBSTR(HOTKEY_NAME_WINDOW_INPUT_KEY_REAL_STROKE), 0, 0, FALSE, NULL);

    // Section: 窗口:DWM
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_ENABLE_COMPOSITION), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_EXTEND_FRAME), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_INVALIDATE_ICONIC_BITMAPS), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMNCRP_USEWINDOWSTYLE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMNCRP_DISABLED), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMNCRP_ENABLED), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_TRANSITIONS_FORCEDISABLED_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_TRANSITIONS_FORCEDISABLED_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_ALLOW_NCPAINT_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_ALLOW_NCPAINT_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_NONCLIENT_RTL_LAYOUT_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_NONCLIENT_RTL_LAYOUT_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_FORCE_ICONIC_REPRESENTATION_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_FORCE_ICONIC_REPRESENTATION_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMFLIP3D_DEFAULT), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMFLIP3D_EXCLUDEBELOW), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMFLIP3D_EXCLUDEABOVE), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_HAS_ICONIC_BITMAP_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_HAS_ICONIC_BITMAP_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_DISALLOW_PEEK_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_DISALLOW_PEEK_OFF), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_EXCLUDED_FROM_PEEK_ON), 0, 0, FALSE, NULL);
    pHotkeyMgr->RegisterHotkey(CComBSTR(HOTKEY_SECTION_WINDOW_DWM), CComBSTR(HOTKEY_NAME_WINDOW_DWM_SET_ATTR_DWMWA_EXCLUDED_FROM_PEEK_OFF), 0, 0, FALSE, NULL);

    return S_OK;
}

STDMETHODIMP
MirModuleWindow::Uninit()
{
    // 反注册设置提供项
    CComPtr<IConfig> pConfig = GetComponentInterface<IConfig>(COMPONENT_CONFIG);
    ASSERT_RETURN(NULL != pConfig, E_FAIL);
    pConfig->RemoveProvider(this);

    return S_OK;
}

STDMETHODIMP
MirModuleWindow::RequestUI(HWND hMainWnd, BSTR *pTitle, HWND *pUI)
{
    ASSERT_RETURN(NULL != pTitle, E_INVALIDARG);
    ASSERT_RETURN(NULL != pUI, E_INVALIDARG);

    // 创建窗口
    m_oDlgWindow.Create(hMainWnd);
    ASSERT_RETURN(m_oDlgWindow.IsWindow(), E_FAIL);

    *pTitle = CComBSTR(L"窗口管理").Detach();
    *pUI = m_oDlgWindow.m_hWnd;

    return S_OK;
}

HRESULT
MirModuleWindow::CreateInstance(REFGUID pGUID, void **pObject)
{
    return E_NOINTERFACE;
}

STDMETHODIMP
MirModuleWindow::GetRawConfig(BSTR strSection, BSTR strKey, BSTR *pRawValue)
{
    HRESULT hr = E_FAIL;
    CComBSTR bstrSection, bstrKey;
    bstrSection.Attach(strSection);
    bstrKey.Attach(strKey);

    if(bstrSection == CONFIG_SECTION_WINDOW) {
        ConfigMap::iterator oCfgIt = m_vWindowConfigs.find(strKey);
        if(oCfgIt != m_vWindowConfigs.end()) {
            *pRawValue = oCfgIt->second.Copy();
            hr = S_OK;
        }
    }

    bstrSection.Detach();
    bstrKey.Detach();

    return hr;
}

STDMETHODIMP
MirModuleWindow::SetRawConfig(BSTR strSection, BSTR strKey, BSTR strRawValue)
{
    HRESULT hr = E_FAIL;
    CComBSTR bstrSection, bstrKey;
    bstrSection.Attach(strSection);
    bstrKey.Attach(strKey);

    if(bstrSection == CONFIG_SECTION_WINDOW) {
        ConfigMap::iterator oCfgIt = m_vWindowConfigs.find(strKey);
        if(oCfgIt != m_vWindowConfigs.end()) {
            oCfgIt->second = strRawValue;
            hr = S_OK;
        }
    }

    bstrSection.Detach();
    bstrKey.Detach();

    return hr;
}